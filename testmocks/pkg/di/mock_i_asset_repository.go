// Code generated by mockery v2.53.2. DO NOT EDIT.

package mockdi

import (
	assetschema "test_data_flow/internal/asset/schema"

	mock "github.com/stretchr/testify/mock"
)

// MockIAssetRepository is an autogenerated mock type for the IAssetRepository type
type MockIAssetRepository struct {
	mock.Mock
}

type MockIAssetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAssetRepository) EXPECT() *MockIAssetRepository_Expecter {
	return &MockIAssetRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: a
func (_m *MockIAssetRepository) Create(a *assetschema.AssetCommand) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*assetschema.AssetCommand) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAssetRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIAssetRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - a *assetschema.AssetCommand
func (_e *MockIAssetRepository_Expecter) Create(a interface{}) *MockIAssetRepository_Create_Call {
	return &MockIAssetRepository_Create_Call{Call: _e.mock.On("Create", a)}
}

func (_c *MockIAssetRepository_Create_Call) Run(run func(a *assetschema.AssetCommand)) *MockIAssetRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*assetschema.AssetCommand))
	})
	return _c
}

func (_c *MockIAssetRepository_Create_Call) Return(_a0 error) *MockIAssetRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAssetRepository_Create_Call) RunAndReturn(run func(*assetschema.AssetCommand) error) *MockIAssetRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: uid, assetName
func (_m *MockIAssetRepository) Delete(uid int64, assetName string) error {
	ret := _m.Called(uid, assetName)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(uid, assetName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAssetRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIAssetRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - uid int64
//   - assetName string
func (_e *MockIAssetRepository_Expecter) Delete(uid interface{}, assetName interface{}) *MockIAssetRepository_Delete_Call {
	return &MockIAssetRepository_Delete_Call{Call: _e.mock.On("Delete", uid, assetName)}
}

func (_c *MockIAssetRepository_Delete_Call) Run(run func(uid int64, assetName string)) *MockIAssetRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockIAssetRepository_Delete_Call) Return(_a0 error) *MockIAssetRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAssetRepository_Delete_Call) RunAndReturn(run func(int64, string) error) *MockIAssetRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: uid, assetName
func (_m *MockIAssetRepository) Get(uid int64, assetName string) (*assetschema.AssetModel, error) {
	ret := _m.Called(uid, assetName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *assetschema.AssetModel
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*assetschema.AssetModel, error)); ok {
		return rf(uid, assetName)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *assetschema.AssetModel); ok {
		r0 = rf(uid, assetName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assetschema.AssetModel)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(uid, assetName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAssetRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIAssetRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - uid int64
//   - assetName string
func (_e *MockIAssetRepository_Expecter) Get(uid interface{}, assetName interface{}) *MockIAssetRepository_Get_Call {
	return &MockIAssetRepository_Get_Call{Call: _e.mock.On("Get", uid, assetName)}
}

func (_c *MockIAssetRepository_Get_Call) Run(run func(uid int64, assetName string)) *MockIAssetRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockIAssetRepository_Get_Call) Return(_a0 *assetschema.AssetModel, _a1 error) *MockIAssetRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAssetRepository_Get_Call) RunAndReturn(run func(int64, string) (*assetschema.AssetModel, error)) *MockIAssetRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: uid
func (_m *MockIAssetRepository) GetAll(uid int64) ([]*assetschema.AssetModel, error) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*assetschema.AssetModel
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*assetschema.AssetModel, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(int64) []*assetschema.AssetModel); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*assetschema.AssetModel)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAssetRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockIAssetRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - uid int64
func (_e *MockIAssetRepository_Expecter) GetAll(uid interface{}) *MockIAssetRepository_GetAll_Call {
	return &MockIAssetRepository_GetAll_Call{Call: _e.mock.On("GetAll", uid)}
}

func (_c *MockIAssetRepository_GetAll_Call) Run(run func(uid int64)) *MockIAssetRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockIAssetRepository_GetAll_Call) Return(_a0 []*assetschema.AssetModel, _a1 error) *MockIAssetRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAssetRepository_GetAll_Call) RunAndReturn(run func(int64) ([]*assetschema.AssetModel, error)) *MockIAssetRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAssetRepository creates a new instance of MockIAssetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAssetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAssetRepository {
	mock := &MockIAssetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
