// Code generated by mockery v2.53.2. DO NOT EDIT.

package mockdi

import (
	authschema "test_data_flow/internal/auth/schema"

	mock "github.com/stretchr/testify/mock"
)

// MockIAuthService is an autogenerated mock type for the IAuthService type
type MockIAuthService struct {
	mock.Mock
}

type MockIAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthService) EXPECT() *MockIAuthService_Expecter {
	return &MockIAuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: loginCommand
func (_m *MockIAuthService) Login(loginCommand *authschema.LoginCommand) (int64, string, error) {
	ret := _m.Called(loginCommand)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*authschema.LoginCommand) (int64, string, error)); ok {
		return rf(loginCommand)
	}
	if rf, ok := ret.Get(0).(func(*authschema.LoginCommand) int64); ok {
		r0 = rf(loginCommand)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*authschema.LoginCommand) string); ok {
		r1 = rf(loginCommand)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*authschema.LoginCommand) error); ok {
		r2 = rf(loginCommand)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - loginCommand *authschema.LoginCommand
func (_e *MockIAuthService_Expecter) Login(loginCommand interface{}) *MockIAuthService_Login_Call {
	return &MockIAuthService_Login_Call{Call: _e.mock.On("Login", loginCommand)}
}

func (_c *MockIAuthService_Login_Call) Run(run func(loginCommand *authschema.LoginCommand)) *MockIAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*authschema.LoginCommand))
	})
	return _c
}

func (_c *MockIAuthService_Login_Call) Return(_a0 int64, _a1 string, _a2 error) *MockIAuthService_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIAuthService_Login_Call) RunAndReturn(run func(*authschema.LoginCommand) (int64, string, error)) *MockIAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthService creates a new instance of MockIAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthService {
	mock := &MockIAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
