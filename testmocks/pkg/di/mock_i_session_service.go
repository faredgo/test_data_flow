// Code generated by mockery v2.53.2. DO NOT EDIT.

package mockdi

import (
	sessionschema "test_data_flow/internal/session/schema"

	mock "github.com/stretchr/testify/mock"
)

// MockISessionService is an autogenerated mock type for the ISessionService type
type MockISessionService struct {
	mock.Mock
}

type MockISessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockISessionService) EXPECT() *MockISessionService_Expecter {
	return &MockISessionService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: uid, ipAddress
func (_m *MockISessionService) Create(uid int64, ipAddress string) (string, error) {
	ret := _m.Called(uid, ipAddress)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (string, error)); ok {
		return rf(uid, ipAddress)
	}
	if rf, ok := ret.Get(0).(func(int64, string) string); ok {
		r0 = rf(uid, ipAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(uid, ipAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockISessionService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockISessionService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - uid int64
//   - ipAddress string
func (_e *MockISessionService_Expecter) Create(uid interface{}, ipAddress interface{}) *MockISessionService_Create_Call {
	return &MockISessionService_Create_Call{Call: _e.mock.On("Create", uid, ipAddress)}
}

func (_c *MockISessionService_Create_Call) Run(run func(uid int64, ipAddress string)) *MockISessionService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockISessionService_Create_Call) Return(_a0 string, _a1 error) *MockISessionService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockISessionService_Create_Call) RunAndReturn(run func(int64, string) (string, error)) *MockISessionService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: uid
func (_m *MockISessionService) Delete(uid int64) error {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockISessionService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockISessionService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - uid int64
func (_e *MockISessionService_Expecter) Delete(uid interface{}) *MockISessionService_Delete_Call {
	return &MockISessionService_Delete_Call{Call: _e.mock.On("Delete", uid)}
}

func (_c *MockISessionService_Delete_Call) Run(run func(uid int64)) *MockISessionService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockISessionService_Delete_Call) Return(_a0 error) *MockISessionService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockISessionService_Delete_Call) RunAndReturn(run func(int64) error) *MockISessionService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: uid
func (_m *MockISessionService) Get(uid int64) (*sessionschema.SessionResponse, error) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sessionschema.SessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*sessionschema.SessionResponse, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(int64) *sessionschema.SessionResponse); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessionschema.SessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockISessionService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockISessionService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - uid int64
func (_e *MockISessionService_Expecter) Get(uid interface{}) *MockISessionService_Get_Call {
	return &MockISessionService_Get_Call{Call: _e.mock.On("Get", uid)}
}

func (_c *MockISessionService_Get_Call) Run(run func(uid int64)) *MockISessionService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockISessionService_Get_Call) Return(_a0 *sessionschema.SessionResponse, _a1 error) *MockISessionService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockISessionService_Get_Call) RunAndReturn(run func(int64) (*sessionschema.SessionResponse, error)) *MockISessionService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockISessionService creates a new instance of MockISessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISessionService {
	mock := &MockISessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
