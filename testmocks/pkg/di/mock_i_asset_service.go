// Code generated by mockery v2.53.2. DO NOT EDIT.

package mockdi

import (
	assetschema "test_data_flow/internal/asset/schema"

	mock "github.com/stretchr/testify/mock"

	zip "archive/zip"
)

// MockIAssetService is an autogenerated mock type for the IAssetService type
type MockIAssetService struct {
	mock.Mock
}

type MockIAssetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAssetService) EXPECT() *MockIAssetService_Expecter {
	return &MockIAssetService_Expecter{mock: &_m.Mock}
}

// DeleteAsset provides a mock function with given fields: uid, assetName
func (_m *MockIAssetService) DeleteAsset(uid int64, assetName string) error {
	ret := _m.Called(uid, assetName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(uid, assetName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAssetService_DeleteAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAsset'
type MockIAssetService_DeleteAsset_Call struct {
	*mock.Call
}

// DeleteAsset is a helper method to define mock.On call
//   - uid int64
//   - assetName string
func (_e *MockIAssetService_Expecter) DeleteAsset(uid interface{}, assetName interface{}) *MockIAssetService_DeleteAsset_Call {
	return &MockIAssetService_DeleteAsset_Call{Call: _e.mock.On("DeleteAsset", uid, assetName)}
}

func (_c *MockIAssetService_DeleteAsset_Call) Run(run func(uid int64, assetName string)) *MockIAssetService_DeleteAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockIAssetService_DeleteAsset_Call) Return(_a0 error) *MockIAssetService_DeleteAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAssetService_DeleteAsset_Call) RunAndReturn(run func(int64, string) error) *MockIAssetService_DeleteAsset_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: uid
func (_m *MockIAssetService) GetAll(uid int64) ([]*assetschema.AssetResponse, error) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*assetschema.AssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*assetschema.AssetResponse, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(int64) []*assetschema.AssetResponse); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*assetschema.AssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAssetService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockIAssetService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - uid int64
func (_e *MockIAssetService_Expecter) GetAll(uid interface{}) *MockIAssetService_GetAll_Call {
	return &MockIAssetService_GetAll_Call{Call: _e.mock.On("GetAll", uid)}
}

func (_c *MockIAssetService_GetAll_Call) Run(run func(uid int64)) *MockIAssetService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockIAssetService_GetAll_Call) Return(_a0 []*assetschema.AssetResponse, _a1 error) *MockIAssetService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAssetService_GetAll_Call) RunAndReturn(run func(int64) ([]*assetschema.AssetResponse, error)) *MockIAssetService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: uid, assetName
func (_m *MockIAssetService) Load(uid int64, assetName string) (*assetschema.AssetResponse, error) {
	ret := _m.Called(uid, assetName)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *assetschema.AssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*assetschema.AssetResponse, error)); ok {
		return rf(uid, assetName)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *assetschema.AssetResponse); ok {
		r0 = rf(uid, assetName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assetschema.AssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(uid, assetName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAssetService_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockIAssetService_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - uid int64
//   - assetName string
func (_e *MockIAssetService_Expecter) Load(uid interface{}, assetName interface{}) *MockIAssetService_Load_Call {
	return &MockIAssetService_Load_Call{Call: _e.mock.On("Load", uid, assetName)}
}

func (_c *MockIAssetService_Load_Call) Run(run func(uid int64, assetName string)) *MockIAssetService_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockIAssetService_Load_Call) Return(_a0 *assetschema.AssetResponse, _a1 error) *MockIAssetService_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAssetService_Load_Call) RunAndReturn(run func(int64, string) (*assetschema.AssetResponse, error)) *MockIAssetService_Load_Call {
	_c.Call.Return(run)
	return _c
}

// MakeZip provides a mock function with given fields: zipWriter, files
func (_m *MockIAssetService) MakeZip(zipWriter *zip.Writer, files []*assetschema.AssetResponse) error {
	ret := _m.Called(zipWriter, files)

	if len(ret) == 0 {
		panic("no return value specified for MakeZip")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*zip.Writer, []*assetschema.AssetResponse) error); ok {
		r0 = rf(zipWriter, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAssetService_MakeZip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeZip'
type MockIAssetService_MakeZip_Call struct {
	*mock.Call
}

// MakeZip is a helper method to define mock.On call
//   - zipWriter *zip.Writer
//   - files []*assetschema.AssetResponse
func (_e *MockIAssetService_Expecter) MakeZip(zipWriter interface{}, files interface{}) *MockIAssetService_MakeZip_Call {
	return &MockIAssetService_MakeZip_Call{Call: _e.mock.On("MakeZip", zipWriter, files)}
}

func (_c *MockIAssetService_MakeZip_Call) Run(run func(zipWriter *zip.Writer, files []*assetschema.AssetResponse)) *MockIAssetService_MakeZip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zip.Writer), args[1].([]*assetschema.AssetResponse))
	})
	return _c
}

func (_c *MockIAssetService_MakeZip_Call) Return(_a0 error) *MockIAssetService_MakeZip_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAssetService_MakeZip_Call) RunAndReturn(run func(*zip.Writer, []*assetschema.AssetResponse) error) *MockIAssetService_MakeZip_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: a
func (_m *MockIAssetService) Upload(a *assetschema.AssetCommand) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*assetschema.AssetCommand) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAssetService_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockIAssetService_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - a *assetschema.AssetCommand
func (_e *MockIAssetService_Expecter) Upload(a interface{}) *MockIAssetService_Upload_Call {
	return &MockIAssetService_Upload_Call{Call: _e.mock.On("Upload", a)}
}

func (_c *MockIAssetService_Upload_Call) Run(run func(a *assetschema.AssetCommand)) *MockIAssetService_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*assetschema.AssetCommand))
	})
	return _c
}

func (_c *MockIAssetService_Upload_Call) Return(_a0 error) *MockIAssetService_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAssetService_Upload_Call) RunAndReturn(run func(*assetschema.AssetCommand) error) *MockIAssetService_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAssetService creates a new instance of MockIAssetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAssetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAssetService {
	mock := &MockIAssetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
