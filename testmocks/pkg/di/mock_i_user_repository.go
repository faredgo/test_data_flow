// Code generated by mockery v2.53.2. DO NOT EDIT.

package mockdi

import (
	userschema "test_data_flow/internal/user/schema"

	mock "github.com/stretchr/testify/mock"
)

// MockIUserRepository is an autogenerated mock type for the IUserRepository type
type MockIUserRepository struct {
	mock.Mock
}

type MockIUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserRepository) EXPECT() *MockIUserRepository_Expecter {
	return &MockIUserRepository_Expecter{mock: &_m.Mock}
}

// FindByLogin provides a mock function with given fields: login
func (_m *MockIUserRepository) FindByLogin(login string) (*userschema.UserModel, error) {
	ret := _m.Called(login)

	if len(ret) == 0 {
		panic("no return value specified for FindByLogin")
	}

	var r0 *userschema.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*userschema.UserModel, error)); ok {
		return rf(login)
	}
	if rf, ok := ret.Get(0).(func(string) *userschema.UserModel); ok {
		r0 = rf(login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userschema.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserRepository_FindByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByLogin'
type MockIUserRepository_FindByLogin_Call struct {
	*mock.Call
}

// FindByLogin is a helper method to define mock.On call
//   - login string
func (_e *MockIUserRepository_Expecter) FindByLogin(login interface{}) *MockIUserRepository_FindByLogin_Call {
	return &MockIUserRepository_FindByLogin_Call{Call: _e.mock.On("FindByLogin", login)}
}

func (_c *MockIUserRepository_FindByLogin_Call) Run(run func(login string)) *MockIUserRepository_FindByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIUserRepository_FindByLogin_Call) Return(_a0 *userschema.UserModel, _a1 error) *MockIUserRepository_FindByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserRepository_FindByLogin_Call) RunAndReturn(run func(string) (*userschema.UserModel, error)) *MockIUserRepository_FindByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserRepository creates a new instance of MockIUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserRepository {
	mock := &MockIUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
